terraform commands:
-------------------
- terraform init 
- terraform init -reconfigure
- terraform apply -auto-approve
- terraform validate
- terraform fmt
- terraform destroy -auto-approve
- terraform show -> shows the current state of the infrastructure
- terraform init -upgrade



terraform.tfvars:
------------------
- If we assign any variables under terraform.tfvars it will overwrite variables.tf vaules
- If you want to overwrite values, Here right side name should be given same as in varibales.tf file
    intsnace_type = "t3.small"
    sg_name = "taking_from_tfvars"

variable preferences:
--------------------
1. command line
    terraform plan -var "sg_name=cmd-line-allow_all"
2. tfvars
3. env variables
    export TF_VARS_<name of the variable>=value
    export TF_VARS_sg_name=env-variable-allow_all
    unset TF_VAR_sg_name --> To remove env variable preference
4. default values
5. user prompt


Loops:
---------
01. count based loop 
    count = 4 --- write count under resource defination block
    count.index --- very helpful 
02. for loop 
    - If you have list - go to count loop
    - if you have map or set - go to forloop (each.key, each.value)
    - if you want convert list to map use - toset() - function
    - You can also use for list[map{}] - list of map
03. dynamic block
    - If you want to allow traffic from specific ports, you have to repeat egress block multiple times.
    - To avoid that we can use dynamic block concept.
    - We can repeat the content of the resource but not resource like instance creation etc
    - Example of block: 
            egress {
            description      = "Allow all traffic"  // optional
            from_port        = var.from_port
            to_port          = var.to_port
            protocol         = "-1"
            cidr_blocks      = var.cidr_blocks
            ipv6_cidr_blocks = ["::/0"]
        }
    - syntax:
        dynamic "ingress" {
            for_each = var.ingress_ports
            content {
                from_port        = ingress.value["from_port"]             
                to_port          = ingress.value["to_port"]      
                protocol         = "-1"              
                cidr_blocks      = var.cidr_blocks
                ipv6_cidr_blocks = ["::/0"]
            }
        }

To set indentation:
-------------------
- use terraform fmt -> commnad to set indentation


Interpolation:
---------------
- used to mix string and variable
- Eg:
    name    = "${each.key}.${var.domain_name}" #monogdb.trishulpictures.shop


Functions:
------------
-  Terraform will not allow use to write our own Functions.
-  we have to use built in functions only
- some built in functions:
    - length, toset, merge



Datasources:
-------------
- variables -> input
- outputs -> print the info after creating the resource
- Datasources are used to query the info in the provider and use that info to create the resources


Locals:
---------
- In variables - You will see key and value. Here value is static.
- If you want to get value dynamically then we will go for locals:
    - locals can have expressions, you can assign a name to it and use it wherever you require
    - locals are like varibales but here we can use expressions where variables will not allow.
    - In locals you can use expressions, interpolation, functions
    - we can write the values which we have provided in locals but in variables we can overwrite


state:
----------
- IaaC is a declarative way of creating infra.
- .tf -> Declared/Desired the infra - Expectation
- What exists in aws - Reality
- statefiles - terraform uses this file to track the resources what it created in provider

terraform plan/apply:
---------------------
- reads .tf files - what user wants
- reads state files
- query the provider - already exists or not

    - once above 3 stages are done then only it will start creating resources.
- terraform apply - here also it will check - any modifications are there?
- if you do terraform plan or terraform apply - always a refresh operation will happen in background.


Note:
-----
    - Keeping state file in local will not have collaborative environment. so we need to have centralised code.
    - So we have remote state - to maintain collaborativeenv's. 
    - terraform always checks/reffers centralised state file. So we dont have duplicate resources.
    - In AWS we have a service called - s3 bucket to maintain state file with localing.

Note:
-----
- s3 bucket to store state file (simple storage service)
- Dynamo DB - locking purpose - Depricated
    - LockID - Keyword shoudl be same 
- use s3 with native locking


Provisioners:
----------------
- when you create the server using terraform, we can take some actions using provisioners
1. local-exec - where I run terraform command, that is local to terraform
2. remote-exec - remote means server I created using terraform - if you want to run some commands in remote machine without login



Multiple-infra using terraform:
-------------------------------------
- DEV, QA, PROD

- Commands to switch to dev env's:
    - terraform init -backend-config=dev/backend.tfvars
    - terraform init -backend-config=prod/backend.tfvars

    - terraform plan -var-file=dev/dev.tfvars
    - terraform plan -var-file=dev/prod.tfvars

    - terraform apply -var-file=dev/dev.tfvars
    - terraform apply -var-file=dev/prod.tfvars

- if you are changing from one env to other to give reconfigure.
- Eg: I was in dev and want to switch to prod 
    - terraform init -reconfigure -backend-config=prod/backend.tfvars



Workspace:
-----------
- terraform workspace
    - Provides the list of commands
- terraform workspace new dev
    - It creates new dev workspace env
- terraform workspace new prod
    - It creates new prod workspace env
- terraform workspace select <env_name>
    - To shift to another env

- terraform.workspace -> Keyword
- lookup(map, key, default) -> function
    - based on key selection you will get map value, if keyvalue is present it will give default value


Terraform Modules:
--------------------
- DRY principle
- Module -> Wrire a common code at one place
- Project -> use the module by passing variables 


Naming convention:
---------------------
- Use underscore(_) -> use in programming - resoure name
- Use dash(-) -> where name are exposed to humans
- prefer to use lower case and numbers only
- Dont repeat resource type in resource name


VPC:
-----
- Virtual Private Cloud
- Internet Gateway
- Subnets
    - Public Subnet
    - Private Subnet
- Routes
- Route Table
- Elastic IP 
    - Static IP 
- Peering


Ports:
-------
- http -> 80
- https -> 443
- ssh -> 22

SSM Parameter Store:
--------------------
- Used to store values like vpc_id, sg_id etc..

